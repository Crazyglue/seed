{"version":3,"sources":["libs/toCurrency.ts","components/OrderList.tsx","App.tsx","libs/sortOrders.ts","libs/parseL2Update.ts","serviceWorker.js","index.js"],"names":["toCurrency","arguments","length","undefined","toLocaleString","window","navigator","language","style","currency","OrderList","props","_props$orders","orders","orderList","slice","map","_ref","_ref2","Object","slicedToArray","price","amount","react_default","a","createElement","key","Table","striped","bordered","hover","variant","className","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","refWebSocket","state","sell","buy","lastSalePrice","previousUpdates","updates","side","order","direction","reduce","allUpdates","previousIndex","findIndex","_ref3","splice","push","filter","_ref5","sort","updateString","data","JSON","parse","type","alert","update","changes","size","objectSpread","defineProperty","concat","toConsumableArray","Number","filterUpdates","setState","_ref7","asks","bids","convertedAsks","_ref8","_ref9","convertedBids","_ref10","_ref11","console","log","sendMessage","stringify","product_ids","channels","_this2","_ref12","_ref13","firstSell","_ref15","firstBuy","difference","midpointPrice","document","title","Row","build_default","url","debug","onMessage","handleData","bind","onOpen","onClose","ref","Websocket","Col","xs","sm","components_OrderList","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.59d66a26.chunk.js","sourcesContent":["export default (num: number = 0) => {\n    return num.toLocaleString(window.navigator.language, { style: 'currency', currency: 'USD' });\n}\n","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { Update } from '../models/seed';\r\nimport toCurrency from '../libs/toCurrency';\r\n\r\ninterface IOrderProps {\r\n    orders: Update[];\r\n}\r\n\r\nfunction OrderList(props: IOrderProps) {\r\n    const { orders = [] } = props;\r\n\r\n    const orderList = orders.slice(0, 15).map(([ price, amount ]) => {\r\n        return (\r\n            <tr key={price}>\r\n                <td>{toCurrency(price)}</td>\r\n                <td>{amount}</td>\r\n            </tr>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <Table striped bordered hover variant=\"dark\" className='OrderList__container'>\r\n            <thead>\r\n                <tr>\r\n                    <th>Price (USD)</th>\r\n                    <th>Amount (BTC)</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody className=\"OrderList__container\">\r\n                {orderList}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default OrderList;","import React from \"react\";\nimport Websocket from \"react-websocket\";\nimport { Row, Col } from 'react-bootstrap';\n\nimport \"./App.css\";\nimport OrderList from './components/OrderList';\nimport parseL2Update from './libs/parseL2Update';\nimport { CoinbaseUpdate, CoinbaseBase, CoinbaseSnapshot, Side } from \"./models/coinbase\";\nimport sortOrders from \"./libs/sortOrders\";\nimport { Update } from \"./models/seed\";\nimport toCurrency from './libs/toCurrency';\n\ninterface ExchangeData {\n    sell: Update[],\n    buy: Update[],\n}\n\ninterface IAppState extends ExchangeData {\n    lastUpdate: Date;\n    currentTime: Date;\n    lastSalePrice: number;\n}\n\nclass App extends React.Component<IAppState, any> {\n    private refWebSocket: any;\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            sell: [],\n            buy: [],\n            lastSalePrice: 0\n        }\n    }\n\n    filterUpdates(previousUpdates: Update[], updates: Update[], side: Side): Update[] {\n        const direction = side === 'sell' ? 'desc' : 'asc';\n        return updates.reduce((allUpdates, [ price, amount ]) => {\n            const previousIndex = previousUpdates.findIndex(([ existingPrice ]) => existingPrice === price)\n\n            if (previousIndex !== -1) { // Replace existing tuple\n                allUpdates.splice(previousIndex, 1, [ price, amount ])\n            } else { // Append tuple\n                allUpdates.push([ price, amount ])\n            }\n\n            return allUpdates;\n        }, previousUpdates)\n            .filter(([ , amount ]: Update) => amount > 0)\n            .sort(sortOrders(direction))\n            .slice(0, 25)\n    }\n\n    handleData(updateString: string) {\n        const data: CoinbaseBase = JSON.parse(updateString)\n        if (data.type === 'error') {\n            alert('There was an error' + data);\n        } else if (data.type === 'l2update') {\n            const update = parseL2Update(data as CoinbaseUpdate);\n\n            const sell = this.filterUpdates(this.state.sell, update.sell, 'sell');\n            const buy = this.filterUpdates(this.state.buy, update.buy, 'buy');\n\n            // TODO: Decrement amounts in `buy` from all the latest sales\n            this.setState({\n                sell,\n                buy\n            })\n\n        } else if (data.type === 'snapshot') {\n            const { asks, bids } = data as CoinbaseSnapshot;\n\n            // Convert the asks/bids to an Update[]\n            const convertedAsks: Update[] = asks.map(([ price, amount ]) => [ Number(price), Number(amount) ])\n            const convertedBids: Update[] = bids.map(([ price, amount ]) => [ Number(price), Number(amount) ])\n\n            this.setState({\n                sell: this.filterUpdates([], convertedAsks, 'sell'),\n                buy: this.filterUpdates([], convertedBids, 'buy')\n            })\n        }\n    }\n\n    onOpen() {\n        // Subscribe to L2 BTC-USD channel\n        console.log('Subscribing to BTC-USD')\n        this.refWebSocket.sendMessage(JSON.stringify({\n            type: \"subscribe\",\n            product_ids: [ 'BTC-USD' ],\n            channels: [\"level2\"]\n        }));\n    }\n\n    onClose() {\n        console.log(\"Closing subscription to BTC-USD\");\n        this.refWebSocket.sendMessage(JSON.stringify({\n            type: 'unsubscribe',\n            product_ids: [\n                'BTC-USD'\n            ],\n            channels: [ 'level2' ]\n        }))\n    }\n\n    render() {\n        const { sell, buy }: ExchangeData = this.state as IAppState;\n        const [ firstSell ] = sell[0] || [ 0 ]\n        const [ firstBuy ] = buy[0] || [ 0 ]\n        const difference = firstSell - firstBuy\n        const midpointPrice = firstBuy + (difference / 2);\n\n        // TODO: Use hooks!\n        document.title = 'BTC-USD ' + toCurrency(firstSell);\n\n        return (\n            <Row className=\"App\">\n                <Websocket\n                    url=\"wss://ws-feed.pro.coinbase.com\"\n                    debug\n                    onMessage={this.handleData.bind(this)}\n                    onOpen={this.onOpen.bind(this)}\n                    onClose={this.onClose.bind(this)}\n                    ref={(Websocket: any) => {\n                        this.refWebSocket = Websocket;\n                    }}\n                />\n\n                <Col xs='12' className='App-content'>\n                    <Row>\n                        <Col sm='12'>\n                            <h2>Midpoint</h2>\n                            { toCurrency(midpointPrice) }\n                            <hr />\n                            <h4>Spread</h4>\n                            { toCurrency(difference) }\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col sm='6'>\n                            <h1>Sell</h1>\n                            <OrderList\n                                orders={this.state.sell}\n                            ></OrderList>\n                        </Col>\n\n                        <Col sm='6'>\n                            <h1>Buy</h1>\n                            <OrderList\n                                orders={this.state.buy}\n                            ></OrderList>\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n        );\n    }\n}\n\nexport default App;\n","import { Update } from \"../models/seed\";\n\nexport type SortDirection = 'asc' | 'desc';\n\nexport default (order: SortDirection) => ([ priceA ]: Update, [ priceB ]: Update): number => {\n    return (priceA - priceB) * (order === 'asc' ? -1 : 1);\n}\n","import { CoinbaseUpdate, Change } from \"../models/coinbase\";\r\nimport { Update } from \"../models/seed\";\r\n\r\ninterface ParsedL2Update {\r\n    buy: Update[],\r\n    sell: Update[]\r\n}\r\n\r\nexport default ({ changes }: CoinbaseUpdate): ParsedL2Update => {\r\n    return changes.reduce((update, [ side, price, size ]: Change) => {\r\n        return {\r\n            ...update,\r\n            [side]: [\r\n                ...update[side],\r\n                [ Number(price), Number(size) ]\r\n            ]\r\n        }\r\n    }, { buy: [], sell: [] })\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}