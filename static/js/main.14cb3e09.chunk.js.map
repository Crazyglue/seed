{"version":3,"sources":["components/OrderList.tsx","App.tsx","libs/sortOrders.ts","libs/parseL2Update.ts","serviceWorker.js","index.js"],"names":["OrderList","props","_props$orders","orders","orderList","Object","entries","map","_ref","_ref2","slicedToArray","price","amount","react_default","a","createElement","key","Number","toLocaleString","window","navigator","language","style","currency","Table","striped","bordered","hover","variant","className","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","refWebSocket","state","sell","buy","lastUpdate","Date","getTime","currentTime","shouldUpdate","setState","updates","direction","filter","sort","order","priceA","priceB","factor","numA","numB","reduce","obj","_ref3","_ref4","objectSpread","defineProperty","updateString","data","JSON","parse","type","console","log","update","changes","side","size","sellUpdate","buyUpdate","filterUpdates","reducer","slice","total","_ref5","_ref6","_ref7","asks","bids","sendMessage","stringify","product_ids","channels","_this2","firstSell","keys","firstBuy","difference","midpointPrice","Row","build_default","url","debug","onMessage","handleData","bind","onOpen","onClose","ref","Websocket","Col","xs","sm","components_OrderList","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14cb3e09.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\n\r\ninterface IOrderProps {\r\n    orders: {\r\n        [price: string]: string;\r\n    };\r\n}\r\n\r\nfunction OrderList(props: IOrderProps) {\r\n    const { orders = {} } = props;\r\n\r\n    const orderList = Object.entries(orders).map(([ price, amount ]) => {\r\n        return (\r\n            <tr key={price}>\r\n                <td>{Number(price).toLocaleString(window.navigator.language, { style: 'currency', currency: 'USD' })}</td>\r\n                <td>{amount}</td>\r\n            </tr>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <Table striped bordered hover variant=\"dark\" className='OrderList__container'>\r\n            <thead>\r\n                <tr>\r\n                    <th>Price (USD)</th>\r\n                    <th>Amount</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody className=\"OrderList__container\">\r\n                {orderList}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default OrderList;","import React from \"react\";\nimport Websocket from \"react-websocket\";\nimport { Row, Col } from 'react-bootstrap';\n\nimport \"./App.css\";\nimport OrderList from './components/OrderList';\nimport parseL2Update from './libs/parseL2Update';\nimport { CoinbaseUpdate, CoinbaseBase, CoinbaseSnapshot, SnapshotChange } from \"./models/coinbase\";\nimport sortOrders, { SortDirection } from \"./libs/sortOrders\";\n\ninterface IAppState {\n    sell: object,\n    buy: object,\n    lastUpdate: Date;\n    currentTime: Date\n}\n\nclass App extends React.Component<IAppState, any> {\n    private refWebSocket: any;\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            sell: {},\n            buy: {},\n            lastUpdate: new Date().getTime(),\n            currentTime: new Date().getTime()\n        }\n    }\n\n    shouldComponentUpdate() {\n        const shouldUpdate = this.state.currentTime - this.state.lastUpdate >= 1000;\n\n        if (shouldUpdate) {\n            this.setState({\n                lastUpdate: this.state.currentTime\n            })\n        }\n\n        return shouldUpdate\n    }\n\n    filterUpdates(updates: object, direction: SortDirection) {\n        return Object.entries(updates)\n            .filter(([ , amount ]) => Number(amount) > 0)\n            .sort(sortOrders(direction))\n            .reduce((obj, [price, amount]) => {\n                return {\n                    ...obj,\n                    [price]: amount\n                }\n            }, {});\n    }\n\n    handleData(updateString: string) {\n        const data: CoinbaseBase = JSON.parse(updateString)\n        if (data.type === 'error') {\n            console.log('error', data)\n        } else if (data.type === 'l2update') {\n            const update = parseL2Update(data as CoinbaseUpdate);\n\n            const sellUpdate = {\n                ...this.state.sell,\n                ...update.sell\n            };\n\n            const buyUpdate = {\n                ...this.state.buy,\n                ...update.buy\n            };\n\n            // Not crazy with having to call filterUpdates on every update that comes in\n            // a queue might work better, and then every `n` milliseconds process the queue\n            this.setState({\n                currentTime: new Date().getTime(),\n                sell: this.filterUpdates(sellUpdate, 'desc'),\n                buy: this.filterUpdates(buyUpdate, 'asc')\n            })\n\n        } else if (data.type === 'snapshot') {\n            // Initial state of the L2Channel, only first 50 records\n            const reducer = (updates: SnapshotChange[]) => updates.slice(0, 50).reduce((total, [ price, amount ]) => {\n                return {\n                    ...total,\n                    [price]: amount\n                }\n            }, {})\n\n            const { asks, bids } = data as CoinbaseSnapshot;\n            const sell = reducer(asks)\n            const buy = reducer(bids)\n\n            this.setState({\n                sell,\n                buy,\n                currentTime: new Date().getTime()\n            })\n        }\n    }\n\n    onOpen() {\n        // Subscribe to L2 BTC-USD channel\n        console.log('Subscribing to BTC-USD')\n        this.refWebSocket.sendMessage(JSON.stringify({\n            type: \"subscribe\",\n            product_ids: [ 'BTC-USD' ],\n            channels: [\"level2\"]\n        }));\n    }\n\n    onClose() {\n        console.log(\"Closing subscription to BTC-USD\");\n        this.refWebSocket.sendMessage(JSON.stringify({\n            type: 'unsubscribe',\n            product_ids: [\n                'BTC-USD'\n            ],\n            channels: [ 'level2' ]\n        }))\n    }\n\n    render() {\n        const firstSell = Object.keys(this.state.sell)[0] || 0;\n        const firstBuy = Object.keys(this.state.buy)[0] || 0;\n        const difference = Number(firstSell) - Number(firstBuy)\n        const midpointPrice = Number(firstSell) + (difference / 2);\n\n        return (\n            <Row className=\"App\">\n                <Websocket\n                    url=\"wss://ws-feed.pro.coinbase.com\"\n                    debug\n                    onMessage={this.handleData.bind(this)}\n                    onOpen={this.onOpen.bind(this)}\n                    onClose={this.onClose.bind(this)}\n                    ref={(Websocket: any) => {\n                        this.refWebSocket = Websocket;\n                    }}\n                />\n\n                <Col xs='12' className='App-content'>\n                    <Row>\n                        <Col sm='12'>\n                            <h2>Midpoint</h2>\n                            <hr />\n                            { midpointPrice.toLocaleString(window.navigator.language, { style: 'currency', currency: 'USD' }) }\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col sm='6'>\n                            <h1>Sell</h1>\n                            <OrderList\n                                orders={this.state.sell}\n                            ></OrderList>\n                        </Col>\n\n                        <Col sm='6'>\n                            <h1>Buy</h1>\n                            <OrderList\n                                orders={this.state.buy}\n                            ></OrderList>\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n        );\n    }\n}\n\nexport default App;\n","export type SortDirection = 'asc' | 'desc';\n\nexport default (order: SortDirection) => ([ priceA ]: string[], [ priceB ]: string[]): number => {\n    const factor = order === 'asc' ? -1 : 1\n    const numA = Number(priceA);\n    const numB = Number(priceB);\n    if (numA < numB) return -1 * factor;\n    if (numA > numB) return 1 * factor;\n    return 0;\n}\n\n","import { CoinbaseUpdate, Change } from \"../models/coinbase\";\r\n\r\nexport default ({ changes }: CoinbaseUpdate) => {\r\n    return changes.reduce((update, [ side, price, size ]: Change) => {\r\n        return {\r\n            ...update,\r\n            [side]: {\r\n                ...update[side],\r\n                [price]: size\r\n            }\r\n        }\r\n\r\n    }, { buy: {}, sell: {} })\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}